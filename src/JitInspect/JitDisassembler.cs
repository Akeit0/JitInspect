using System.Buffers;
using System.Collections.Concurrent;
using System.Diagnostics;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;
using Iced.Intel;
using Microsoft.Diagnostics.Runtime;

namespace JitInspect;

/// <summary>
/// Provides an method to dump the ASM generated by the current JIT of a <see cref="MethodInfo"/>.
/// </summary>
public sealed class JitDisassembler(ClrRuntime runtime) : IDisposable
{
    static readonly DisassembleOptions defaultOptions= new DisassembleOptions();
    internal ConcurrentBag<IDisposable> Disposables { get; } = new ConcurrentBag<IDisposable>();

    public static JitDisassembler Create()
    {
        var dt = CreateDataTarget();
        var info = dt.ClrVersions[0];
        var runtime = info.CreateRuntime();
        var decompiler = new JitDisassembler(runtime);
        decompiler.Disposables.Add(dt);
        decompiler.Disposables.Add(runtime);
        return decompiler;
    }

    public static JitDisassembler Create(DataTarget dt)
    {
        var info = dt.ClrVersions[0];
        var runtime = info.CreateRuntime();
        var decompiler = new JitDisassembler(runtime);
        decompiler.Disposables.Add(runtime);
        return decompiler;
    }

    public static DataTarget CreateDataTarget()
    {
        return DataTarget.AttachToProcess(Process.GetCurrentProcess().Id, false);
    }

    static readonly FormatterOptions formatterOptions = new()
    {
        HexPrefix = "0x",
        HexSuffix = null,
        UppercaseHex = false,
        SpaceAfterOperandSeparator = true
    };

    /// <summary>
    /// Disassembles the given method.
    /// </summary>
    /// <param name="method">The method to disassemble.</param>
    /// <param name="options">options</param>
    public string Disassemble(MethodBase method,DisassembleOptions? options=null)
    {
        using var writer = new ArrayPoolBufferWriter<char>();
        Disassemble(writer, method,options);
        return writer.AsSpan().ToString();
    }

    /// <summary>
    /// Disassembles the given method of delegate.
    /// </summary>
    /// <param name="delegate">The delegate to disassemble.</param>
    /// <param name="options">options</param>
    public string Disassemble(Delegate @delegate,DisassembleOptions? options=null)
    {
        return Disassemble(@delegate.Method,options);
    }

    /// <summary>
    /// Disassembles the given method and write to IBufferWriter.
    /// </summary>
    /// <param name="writer">The writer to write the disassembled method to.</param>
    /// <param name="method">The method to disassemble.</param>
    /// <param name="options">options</param>
    public void Disassemble(IBufferWriter<char> writer, MethodBase method,DisassembleOptions? options=null)
    {
        options ??= defaultOptions;
        if (options.ShowMethodSignature)
        {
             WriteSignatureFromReflection(writer, method);
        }
        var indentSpan =(stackalloc char[Math.Clamp(options.Indentation,0,128)]);
        indentSpan.Fill(' ');
        if (method.IsGenericMethodDefinition)
        {
            writer.Write(indentSpan);
            writer.WriteLine("; Open generics cannot be JIT-compiled.");
        }
        else if (method.IsAbstract)
        {
            writer.Write(indentSpan);
            writer.WriteLine("; Abstract method cannot be JIT-compiled.");
        }
        else
        {
            DisassembleConstructedMethod(writer, method, indentSpan);
        }
    }

    void DisassembleConstructedMethod(IBufferWriter<char> writer, MethodBase method, ReadOnlySpan<char> indentSpan)
    {
        RuntimeMethodHandle handle = method.MethodHandle;
        handle.GetFunctionPointer();
        RuntimeHelpers.PrepareMethod(handle);
        ClrMethod? clrMethod;
        lock (runtime)
            runtime.FlushCachedData();
        if (method.IsVirtual && !method.DeclaringType!.IsClass)
        {
            clrMethod = runtime.GetMethodByInstructionPointer((ulong)FunctionPointerHelper.GetMethodPointer((MethodInfo)method));
        }
        else
        {
            clrMethod = FindJitCompiledMethod(handle);
        }

        if (clrMethod == null)
        {
            writer.WriteLine("    ; Failed to find JIT output.");
            return;
        }

        var methodAddress = clrMethod.NativeCode;
        var methodLength = clrMethod.HotColdInfo.HotSize;

        var reader = new MemoryCodeReader(new IntPtr(unchecked((long)methodAddress)), methodLength);
        var decoder = Decoder.Create(GetBitness(runtime.DataTarget.DataReader.Architecture), reader);
        var instructions = new InstructionList();
        decoder.IP = methodAddress;
        while (decoder.IP < (methodAddress + methodLength))
        {
            decoder.Decode(out instructions.AllocUninitializedElement());
        }

        var resolver = new AsmSymbolResolver(runtime, methodAddress, methodLength);
        var formatter = new IntelFormatter(formatterOptions, resolver);
        var output = new DirectFormatterOutput(writer);
        
        foreach (ref var instruction in instructions)
        {
            writer.Write(indentSpan);
            writer.Write("L");
            writer.Write((instruction.IP - methodAddress).ToString("x4"));
            writer.Write(": ");
            formatter.Format(instruction, output);
            writer.WriteLine();
        }
    }

    ClrMethod? FindJitCompiledMethod(RuntimeMethodHandle handle)
    {
        var methodDescAddress = unchecked((ulong)handle.Value.ToInt64());
        if (runtime.GetMethodByHandle(methodDescAddress) is not { } method)
        {
            return null;
        }

        if (method.CompilationType == MethodCompilationType.None || method.NativeCode == 0 || method.HotColdInfo.HotSize == 0)
        {
            return null;
        }

        return method;
    }

    int GetBitness(Architecture architecture) => architecture switch
    {
        Architecture.X64 => 64,
        Architecture.X86 => 32,
        _ => throw new Exception($"Unsupported architecture {architecture}.")
    };

    void WriteTypeName(IBufferWriter<char> writer, Type type)
    {
        if (type.IsByRef)
        {
            WriteTypeName(writer, type.GetElementType()!);
            writer.Write(" ByRef");
            return;
        }

        writer.Write(type.FullName ?? type.Name);
    }

    void WriteSignatureFromReflection(IBufferWriter<char> writer, MethodBase method)
    {
        if (method.DeclaringType is { } declaringType)
        {
            writer.Write(declaringType.FullName);
            writer.Write(".");
        }

        writer.Write(method.Name);
        if (method.IsGenericMethod)
        {
            writer.Write("<");
            var first = true;
            foreach (var type in method.GetGenericArguments())
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    writer.Write(", ");
                }

                WriteTypeName(writer, type);
            }

            writer.Write(">");
        }

        writer.Write("(");
        {
            var first = true;
            foreach (var parameter in method.GetParameters())
            {
                if (first)
                {
                    first = false;
                }
                else
                {
                    writer.Write(", ");
                }

                var type = parameter.ParameterType;
                WriteTypeName(writer, type);
            }
        }
        writer.WriteLine(")");
    }

    public void Dispose()
    {
        foreach (var disposable in Disposables)
            disposable.Dispose();
        Disposables.Clear();
    }
}